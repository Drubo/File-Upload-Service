/*!
 * nodeUpload
 * Copyright(c) 2012 Nibs Solution (BD) Ltd. <drubo@nibssolution.com>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */
var WebSocketServer = require('websocket').server,
	http = require('http'),
	node_static = require('node-static'),
	EventEmitter = process.EventEmitter,
	uaParser = require('ua-parser'),
	pf = require('policyfile'),
	fs = require('fs');

var uploadServer = function uploadServer(host, port, options, fn){
	var self = this;
	this.host = host;
	this.port = port;
	this.options = options;
	
	var clientFiles = new(node_static.Server)();
	
	var server = http.createServer(function(request, response) {
		request.addListener('end', function () {
			clientFiles.serve(request, response, function(err, res){
	        	if(err){
	        		var breakup = request.url.split('?');
	        		if(breakup[0]=='/client.js'){
	        			var result = breakup[1].split('&');
		        		var ary = self.oc(result);
		        		var body = '';
		        		//if(ary.fileReader=='true'){
			        		if(ary.webSocket=='true'){
			        			//body = self.serveWebSocket();
			        			body = self.serveFlash();
			        		}else{
			        			if(ary.flash=='true'){
			        				body = self.serveFlash();
			        			}else{
			        				if(ary.xhr_polling=='true'){
			        					body = self.serveXhrPolling();
			        				}else{
			        					body = self.serveIFrame();
			        				}
			        			}
			        		}
		        		//}else{
		        			//body = self.serveIFrame(port);
		        		//}
			        	response.writeHead(200, {'Content-Length': body.length, 'Content-Type': 'text/javascript' });
						response.write(body);
						response.end();
					}else{
		        		console.log("Error serving " + request.url + " - " + err.message);
		        		response.writeHead(err.status, err.headers);
		        		response.end();
					}
	        	}
	        });
	    });
	});
	if('undefined' == typeof fn){
		server.listen(port, host, function() {
			console.log('Web Socket Server is listening on '+host+' port '+port);
		});
	}else{
		server.listen(port, host, fn);
	}
	
	if(options.flashPolicyServer){
		pf.createServer().listen(1337, server);
	}

	self.wsServer = new WebSocketServer({
	    httpServer: server,
	    // You should not use autoAcceptConnections for production
	    // applications, as it defeats all standard cross-origin protection
	    // facilities built into the protocol and the browser.  You should
	    // *always* verify the connection's origin and decide whether or not
	    // to accept it.
	    autoAcceptConnections: false,
	    maxReceivedMessageSize: 0x40000000, // 1GiB
	    closeTimeout: options.closeTimeout
	    //assembleFragments: false // stream!!
	});
	
	return self.wsServer;
}

module.exports = uploadServer;
uploadServer.prototype.__proto__ = EventEmitter.prototype

uploadServer.prototype.oc = function(a){
  var o = {};
  for(var i=0;i<a.length;i++)
  {
    var c = a[i].split('=');
	o[c[0]]=c[1];
  }
  return o;
}

uploadServer.prototype.serveWebSocket = function(){
	var data = fs.readFileSync('js/machanism.js', 'utf8');
	data += fs.readFileSync('js/web_socket_client.js', 'utf8');
	data += 'var wsfu = new WebSocketFileUploader(".file_uploader", '+this.options.chunkSize+');';
	data += 'wsfu.initialize();'
	data = data.replace(/hostFromServer/g,'"'+this.host+':'+this.port+'"');
	
	return data;
}

uploadServer.prototype.serveFlash = function(){
	var data = 'WEB_SOCKET_SWF_LOCATION = "js/WebSocketMain.swf";WEB_SOCKET_DEBUG = true;FILE_API_DEBUG = true;';
	data += 'FILE_API_SWF_LOCATION = "js/FileAPI.swf";';
	data += fs.readFileSync('js/swfobject.js', 'utf8');
	data += fs.readFileSync('js/web_socket.js', 'utf8');
	data += fs.readFileSync('js/web_socket_client.js', 'utf8');
	data += fs.readFileSync('js/machanism_file_api.js', 'utf8');
	data += 'var wsfu = new WebSocketFileUploader(".file_uploader", '+this.options.chunkSize+');';
	data += 'wsfu.initialize();'
	data += fs.readFileSync('js/file_api.js', 'utf8');

	data = data.replace(/hostFromServer/g,'"'+this.host+':'+this.port+'/"');

	return data;
}

uploadServer.prototype.serveXhrPolling = function(){
	var txt = 'alert("Fallback to Xhr Polling. Under Construction.");';
	return txt;
}

uploadServer.prototype.serveIFrame = function(){
	var txt = 'alert("Fallback to iFrame. Under Construction.");';
	return txt;
}